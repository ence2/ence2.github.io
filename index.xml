<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keep calm carry on</title>
    <link>https://ence2.github.io/</link>
    <description>Recent content on Keep calm carry on</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 01 Feb 2021 20:14:52 +0900</lastBuildDate>
    
	<atom:link href="https://ence2.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>뇌에서 clear된 수능 수준 영어 어휘</title>
      <link>https://ence2.github.io/2021/02/%EB%87%8C%EC%97%90%EC%84%9C-clear%EB%90%9C-%EC%88%98%EB%8A%A5-%EC%88%98%EC%A4%80-%EC%98%81%EC%96%B4-%EC%96%B4%ED%9C%98/</link>
      <pubDate>Mon, 01 Feb 2021 20:14:52 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/02/%EB%87%8C%EC%97%90%EC%84%9C-clear%EB%90%9C-%EC%88%98%EB%8A%A5-%EC%88%98%EC%A4%80-%EC%98%81%EC%96%B4-%EC%96%B4%ED%9C%98/</guid>
      <description>&lt;p&gt;뇌에서 날라간 수능 수준 어휘를 본 포스팅에 정리합니다.&lt;/p&gt;

&lt;p&gt;MD33000 수준(GRE) 뇌에서 날아가 버린 어휘는 다른 포스팅에서 정리합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - STL의 변화[10]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-stl%EC%9D%98-%EB%B3%80%ED%99%9410/</link>
      <pubDate>Wed, 13 Jan 2021 14:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-stl%EC%9D%98-%EB%B3%80%ED%99%9410/</guid>
      <description>&lt;p&gt;C++20에 추가된 STL 표준 관련 추가된 기능을 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Module[9]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-module9/</link>
      <pubDate>Tue, 12 Jan 2021 12:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-module9/</guid>
      <description>&lt;p&gt;현재 글 작성 시점에 C++20 표준의 module을 제대로 지원하는 컴파일러가 존재하지 않아, 간단한 개념과 사용 방법을 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Coroutine[8]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-coroutine8/</link>
      <pubDate>Tue, 12 Jan 2021 11:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-coroutine8/</guid>
      <description>&lt;p&gt;C++20에 추가된 coroutine은 기존 sub-routine과 다르게 caller 함수와 협력 관계로 동작합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - range의 view, ref_view, reverse_view, filter_view[7]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-range%EC%9D%98-view-ref_view-reverse_view-filter_view7/</link>
      <pubDate>Mon, 11 Jan 2021 15:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-range%EC%9D%98-view-ref_view-reverse_view-filter_view7/</guid>
      <description>&lt;p&gt;C++20에서 추가된 Ranges는 C#의 linq와 흡사하게 컨테이너의 데이터를 손쉽게 다룰 수 있는 다양한 알고리즘을 제공합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Requires 절, Concept[6]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-requires-%EC%A0%88-concept6/</link>
      <pubDate>Sun, 10 Jan 2021 10:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-requires-%EC%A0%88-concept6/</guid>
      <description>&lt;p&gt;C++20에서 추가된 Requires와 Concept은 타입이 가져야 하는 요구 조건을 정의하는 문법입니다.&lt;/p&gt;

&lt;p&gt;사용자가 만들 수 도 있고, 미리 만들어 져 있는 C++ 표준 Concept로도 제공합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Designated Initialization, Constexpr, Consteval, etc..[5]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-designated-initialization-constexpr-consteval-etc..5/</link>
      <pubDate>Wed, 06 Jan 2021 16:24:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-designated-initialization-constexpr-consteval-etc..5/</guid>
      <description>&lt;p&gt;다음의 C++20에 추가된 기능을 살펴보겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Designated Initialization(지정된 초기화)&lt;/li&gt;
&lt;li&gt;Constexpr&lt;/li&gt;
&lt;li&gt;Consteval&lt;/li&gt;
&lt;li&gt;ETC&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Three Way Comparison(&lt;=&gt;)[4]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-three-way-comparison4/</link>
      <pubDate>Wed, 06 Jan 2021 13:58:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-three-way-comparison4/</guid>
      <description>&lt;p&gt;c++20에는 새로된 연산자 &amp;lt;=&amp;gt; (three-way comparison operator)가 추가되었습니다.&lt;/p&gt;

&lt;p&gt;이 연산자의 의미는 다음과 같습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Attributes[3]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-attributes3/</link>
      <pubDate>Wed, 06 Jan 2021 11:58:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-attributes3/</guid>
      <description>&lt;p&gt;Attributes는 C++17에서 추가된 문법입니다.&lt;/p&gt;

&lt;p&gt;Attributes는 컴파일러 지시문으로 표준이 나오기 전에는 컴파일러마다 다른 방식으로 사용했습니다.&lt;/p&gt;

&lt;p&gt;C++ 20에서 추가된 Attributes는 다음과 같습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - 람다의 변화[2]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B3%80%ED%99%942/</link>
      <pubDate>Wed, 06 Jan 2021 11:58:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B3%80%ED%99%942/</guid>
      <description>&lt;p&gt;C++20 에서 추가된 람다 표현식의 특징은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;템플릿 사용 가능&lt;/li&gt;
&lt;li&gt;평가 되지 않은 표현식 사용 가능&lt;/li&gt;
&lt;li&gt;캡쳐 하지 않은 표현식에서 디폴트 생성자와 대입 연산자 사용 가능&lt;/li&gt;
&lt;li&gt;암시적 this 캡쳐 deprecated&lt;/li&gt;
&lt;li&gt;parameter pack 캡쳐 가능&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - 소개[1]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EC%86%8C%EA%B0%9C1/</link>
      <pubDate>Tue, 05 Jan 2021 15:58:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EC%86%8C%EA%B0%9C1/</guid>
      <description>&lt;p&gt;C++20 관련 시리즈입니다.
C++20 에 추가된 다양한 문법과 라이브러리를 정리합니다.
본 포스팅에서는 간략한 특징을 소개합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>비주얼 스튜디오 프로젝트 구성속성 옵션 정리</title>
      <link>https://ence2.github.io/2020/12/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1%EC%86%8D%EC%84%B1-%EC%98%B5%EC%85%98-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Tue, 01 Dec 2020 11:35:36 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/12/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1%EC%86%8D%EC%84%B1-%EC%98%B5%EC%85%98-%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;VisualStudio에서 &lt;code&gt;프로젝트&lt;/code&gt; -&amp;gt; &lt;code&gt;우클릭&lt;/code&gt; -&amp;gt; &lt;code&gt;속성&lt;/code&gt;에 들어가면 프로젝트의 &lt;code&gt;구성 속성&lt;/code&gt;에 다양한 옵션을 지정 할 수있습니다.&lt;/p&gt;

&lt;p&gt;의미가 명확하지 않은 옵션들이 있어 틈날 때마다 본 포스팅에 정리 할 예정입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>비주얼 스튜디오 관련 단축키 총정리</title>
      <link>https://ence2.github.io/2020/11/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EA%B4%80%EB%A0%A8-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%B4%9D%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 30 Nov 2020 11:36:17 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EA%B4%80%EB%A0%A8-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%B4%9D%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;비주얼 스튜디오로 개발시 생산성이나 편의성 관련 개발자로 생활하며 사용하는 단축키 정리&lt;/p&gt;

&lt;p&gt;visual asist는 왠만하면 안쓰려고 하지만, 유용한 것은 지속적으로 업데이트 할 예정&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL UNION (ALL) 정의, 사용법</title>
      <link>https://ence2.github.io/2020/11/mssql-union-all-%EC%A0%95%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 29 Nov 2020 23:27:20 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-union-all-%EC%A0%95%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>&lt;p&gt;&lt;strong&gt;UNION/UNION ALL이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;- 두 개의 SELECT문을 합치는 것을 말합니다.&lt;/p&gt;

&lt;p&gt;- 두 개의 SELECT문을 합치는 것이기때문에 제약조건이 많습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL linked server와 OPENQUERY 정의, 사용법</title>
      <link>https://ence2.github.io/2020/11/mssql-linked-server%EC%99%80-openquery-%EC%A0%95%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 29 Nov 2020 23:26:55 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-linked-server%EC%99%80-openquery-%EC%A0%95%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>&lt;p&gt;linked server는&lt;/p&gt;

&lt;p&gt;MsSQL은 linked server라는 기능을 제공하는데, 이를 이용하면 물리적, 논리적으로 독립된 네트워크의 데이터베이스에 원격으로 접속하여 쿼리를 수행 할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>정적 라이브러리(lib) vs 동적 라이브러리(dll)</title>
      <link>https://ence2.github.io/2020/11/%EC%A0%95%EC%A0%81-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AClib-vs-%EB%8F%99%EC%A0%81-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%ACdll/</link>
      <pubDate>Sun, 29 Nov 2020 23:05:52 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%A0%95%EC%A0%81-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AClib-vs-%EB%8F%99%EC%A0%81-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%ACdll/</guid>
      <description>&lt;p&gt;라이브러리란 특정한 코드(함수 혹은 클래스)를 포함하고 있는 컴파일된 파일입니다.&lt;/p&gt;

&lt;p&gt;라이브러리에도 그 쓰임새에 따라서 여러가지 종류가 있습니다.(크게 3가지) 가장 흔하게 쓰일수 있는 &amp;ldquo;정적라이브러리&amp;rdquo;와 &amp;ldquo;공유라이브러리&amp;rdquo;, &amp;ldquo;동적라이브러리&amp;rdquo; 가 있습니다. 이들 라이브러리가 서로 구분되어지는 특징은 라이브러리의 로드 타이밍입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::advance 예제</title>
      <link>https://ence2.github.io/2020/11/stdadvance-%EC%98%88%EC%A0%9C/</link>
      <pubDate>Sun, 29 Nov 2020 22:59:40 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdadvance-%EC%98%88%EC%A0%9C/</guid>
      <description>&lt;p&gt;iterator를 원하는 위치로 옮길 수 있는 함수이다. 컨테이너의 iterator를 i번째 위치로 옮기고 싶을 때 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;표현식 std::advance(i, n)은 반복자 i를 거리 n만큼 증가시킵니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;n &amp;gt; 0 이면,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;++i를 n번 수행하는 것과 동등(다만, __InIter 형식이 임의접근 반복자의 모형이면 advance가 훨씬 더 빠릅니다.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;n &amp;lt; 0 이면,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ndash;i를 n번 수행하는 것과 동등합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>함수처럼 매개변수를 갖는 매크로, #, ## 연산자</title>
      <link>https://ence2.github.io/2020/11/%ED%95%A8%EC%88%98%EC%B2%98%EB%9F%BC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%96%EB%8A%94-%EB%A7%A4%ED%81%AC%EB%A1%9C-%EC%97%B0%EC%82%B0%EC%9E%90/</link>
      <pubDate>Sun, 29 Nov 2020 21:29:12 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%ED%95%A8%EC%88%98%EC%B2%98%EB%9F%BC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%96%EB%8A%94-%EB%A7%A4%ED%81%AC%EB%A1%9C-%EC%97%B0%EC%82%B0%EC%9E%90/</guid>
      <description>&lt;p&gt;#define 매크로 정의시 단순 상수 정의는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#define PI   (3.141592)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;매크로를 활용 하여 인라인 함수 형태로 작성 할 때 매개변수를 전달 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#define CIRCLE(x) ((x)&lt;em&gt;(x)&lt;/em&gt;(PI))&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnitTesting 관련 Google Test, gMock 정리</title>
      <link>https://ence2.github.io/2020/11/unittesting-%EA%B4%80%EB%A0%A8-google-test-gmock-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Thu, 26 Nov 2020 18:33:54 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/unittesting-%EA%B4%80%EB%A0%A8-google-test-gmock-%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;유닛 테스트는 프로그램의 품질과 안정성을 향상시킬 수 있지만 꽤나 번거로운 작업이고 어느정도의 테스트 케이스를 로직과 pair로 작성해야 하기 때문에 관리 비용이 들지만, 이러한 테스팅 환경을 구축하고 습관화 할 경우 어느날 치명적인 버그를 막아주는 경우가 있습닙니다. C#에서는 nUnit이라는 라이브러리를 사용했었는데, C++ 환경에서 Google Test 사용이 필요하여 관련 리서치 내용을 포스팅합닙니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 변수 타입 최대 최소값 편리하게 확인하는 방법 std::numeric_limits</title>
      <link>https://ence2.github.io/2020/11/c-%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%EC%B5%9C%EB%8C%80-%EC%B5%9C%EC%86%8C%EA%B0%92-%ED%8E%B8%EB%A6%AC%ED%95%98%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-stdnumeric_limits/</link>
      <pubDate>Thu, 26 Nov 2020 12:31:52 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%EC%B5%9C%EB%8C%80-%EC%B5%9C%EC%86%8C%EA%B0%92-%ED%8E%B8%EB%A6%AC%ED%95%98%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-stdnumeric_limits/</guid>
      <description>&lt;p&gt;numeric_limits 클래스 템플릿은 템플릿 특수화로 구현되었고, 명시한 타입의 최대값이나 최소값을 질의 할 수 있는 표준화 된 방법을 제공합니다.&lt;/p&gt;

&lt;p&gt;(예 : int 유형에 대해 가능한 가장 큰 값은 std :: numeric_limits &lt;int&gt; :: max ())&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>모나드(Monad)란 무엇인가?</title>
      <link>https://ence2.github.io/2020/11/%EB%AA%A8%EB%82%98%EB%93%9Cmonad%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Wed, 18 Nov 2020 21:43:34 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EB%AA%A8%EB%82%98%EB%93%9Cmonad%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;하스켈에서 모나드는 매우 유용하지만 처음에는 그 개념이 꽤 어렵습니다. 모나드는 수많은 응용이 있기 때문에 사람들은 모나드를 특정 관점에서만 설명하는 경향이 있는데, 그러면 여러분이 모나드를 완벽히 이해하는 데 혼란을 줄 수도 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL OBJECT_ID</title>
      <link>https://ence2.github.io/2020/11/mssql-object_id/</link>
      <pubDate>Tue, 17 Nov 2020 21:03:29 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-object_id/</guid>
      <description>&lt;p&gt;스키마 범위 개체의 데이터베이스 개체 ID를 반환합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>visual studio 디버깅 팁</title>
      <link>https://ence2.github.io/2020/11/visual-studio-%EB%94%94%EB%B2%84%EA%B9%85-%ED%8C%81/</link>
      <pubDate>Mon, 16 Nov 2020 21:30:53 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/visual-studio-%EB%94%94%EB%B2%84%EA%B9%85-%ED%8C%81/</guid>
      <description>&lt;p&gt;&lt;strong&gt;디버그 코드 변경 내용 적용 ALT + F10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;편집하며 계속하기를 시작하여 디버그 중인 코드에 변경 내용을 적용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL Procedure 프로시저</title>
      <link>https://ence2.github.io/2020/11/mssql-procedure-%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80/</link>
      <pubDate>Sun, 15 Nov 2020 15:29:56 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-procedure-%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80/</guid>
      <description>&lt;p&gt;저장 프로시저는 다음과 같은 점에서 다른 프로그래밍 언어의 프로시저와 유사합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;입력 매개 변수를 받아 여러 값을 출력 매개 변수의 형태로 호출하는 프로시저 또는 일괄 처리에 반환합니다.&lt;/li&gt;
&lt;li&gt;다른 프로시저 호출을 비롯하여 데이터베이스에서 작업을 수행하는 프로그래밍 문이 포함되어 있습니다.&lt;/li&gt;
&lt;li&gt;호출하는 프로시저 또는 일괄 처리에 상태 값을 반환하여 성공 또는 실패 및 실패 원인을 나타냅니다.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MsSQL Cursor</title>
      <link>https://ence2.github.io/2020/11/mssql-cursor/</link>
      <pubDate>Sun, 15 Nov 2020 15:17:47 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-cursor/</guid>
      <description>&lt;p&gt;커서는 행 단위 작업을 추가로 제어해야 할 경우 사용되는 기능입니다.&lt;/p&gt;

&lt;p&gt;여러 행을 select 하여 While 반복문 등에 활용 될 수 있습니다. 프로그래밍의 for문의 첨자 i와 비슷합니다.&lt;/p&gt;

&lt;p&gt;프로시저 작성시 활용됩니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL 값 자동 증가 identity와 시퀀스(sequence)</title>
      <link>https://ence2.github.io/2020/11/mssql-%EA%B0%92-%EC%9E%90%EB%8F%99-%EC%A6%9D%EA%B0%80-identity%EC%99%80-%EC%8B%9C%ED%80%80%EC%8A%A4sequence/</link>
      <pubDate>Sun, 15 Nov 2020 14:27:54 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-%EA%B0%92-%EC%9E%90%EB%8F%99-%EC%A6%9D%EA%B0%80-identity%EC%99%80-%EC%8B%9C%ED%80%80%EC%8A%A4sequence/</guid>
      <description>&lt;p&gt;MsSQL에서 identity 옵션은 MySQL의 auto increment 옵션과 같습니다. (insert시 컬럼 값 자동 증가)&lt;/p&gt;

&lt;p&gt;위 옵션들은 해당 테이블에 종속적이며, 여러 테이블에 걸친 전역적인 값 증가는 sequence라는 객체를 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL UDF(User Defined Functions)</title>
      <link>https://ence2.github.io/2020/11/mssql-udfuser-defined-functions/</link>
      <pubDate>Sun, 15 Nov 2020 14:12:55 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-udfuser-defined-functions/</guid>
      <description>&lt;p&gt;프로그래밍 언어의 함수처럼 SQL Server 사용자 정의 함수는 매개 변수를 받아들이고 복잡한 계산과 같은 동작을 수행하며 해당 작업의 결과를 값으로 반환합니다. 반환 값은 단일 스칼라 값이나 결과 집합일 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL 무결성 강제 적용(제약조건) PRIMARY KEY 및 FOREIGN KEY</title>
      <link>https://ence2.github.io/2020/11/mssql-%EB%AC%B4%EA%B2%B0%EC%84%B1-%EA%B0%95%EC%A0%9C-%EC%A0%81%EC%9A%A9%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4-primary-key-%EB%B0%8F-foreign-key/</link>
      <pubDate>Sun, 15 Nov 2020 13:39:43 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-%EB%AC%B4%EA%B2%B0%EC%84%B1-%EA%B0%95%EC%A0%9C-%EC%A0%81%EC%9A%A9%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4-primary-key-%EB%B0%8F-foreign-key/</guid>
      <description>&lt;p&gt;MsSQL 테이블에서 데이터 무결성을 강제 적용하는 데 사용할 수 있는 두 가지 유형의 제약 조건으로 기본 키와 외래 키가 있습니다. 이들 키는 중요한 데이터베이스 개체입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::lock_guard</title>
      <link>https://ence2.github.io/2020/11/stdlock_guard/</link>
      <pubDate>Sat, 14 Nov 2020 22:48:24 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdlock_guard/</guid>
      <description>&lt;h4 id=&#34;std-lock-guard&#34;&gt;std::lock_guard&lt;/h4&gt;

&lt;p&gt;std::lock_guard는 객체 생성 시에 lock되며 객체가 소멸시에 unlock 되는 특성을 가지고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::chrono::high_resolution_clock</title>
      <link>https://ence2.github.io/2020/11/stdchronohigh_resolution_clock/</link>
      <pubDate>Sat, 14 Nov 2020 22:26:09 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdchronohigh_resolution_clock/</guid>
      <description>&lt;p&gt;5 years a go I’ve showed how to &lt;a href=&#34;https://www.guyrutenberg.com/2007/09/22/profiling-code-using-clock_gettime/&#34;&gt;use &lt;code&gt;clock_gettime&lt;/code&gt;&lt;/a&gt; to do basic high_resolution profiling. The approach there is very useful, but unfortunately, not cross-platform. It works only on POSIX compliant systems (especially not windows).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SRW Lock</title>
      <link>https://ence2.github.io/2020/11/srw-lock/</link>
      <pubDate>Sat, 14 Nov 2020 22:16:16 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/srw-lock/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/ko-kr/library/windows/desktop/aa904937(v=vs.85).aspx&#34;&gt;Slim Reader Writer Lock&lt;/a&gt;은 VS2010부터 지원되는 새로운 쓰레드 동기화 객체입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL SET QUOTED_IDENTIFIER ON|OFF</title>
      <link>https://ence2.github.io/2020/11/mssql-set-quoted_identifier-onoff/</link>
      <pubDate>Sat, 14 Nov 2020 22:08:35 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-set-quoted_identifier-onoff/</guid>
      <description>&lt;h4 id=&#34;구문&#34;&gt;구문&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Syntax for SQL Server, Azure SQL Database and SQL on-demand (preview) in Azure Synapse Analytics

SET QUOTED_IDENTIFIER { ON | OFF }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>MsSQL SET ANSI_NULLS ON|OFF</title>
      <link>https://ence2.github.io/2020/11/mssql-set-ansi_nulls-onoff/</link>
      <pubDate>Sat, 14 Nov 2020 22:00:20 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-set-ansi_nulls-onoff/</guid>
      <description>&lt;h3 id=&#34;구문&#34;&gt;구문&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Syntax for SQL Server

SET ANSI_NULLS { ON | OFF }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>MsSQL 실행계획 분석법</title>
      <link>https://ence2.github.io/2020/11/mssql-%EC%8B%A4%ED%96%89%EA%B3%84%ED%9A%8D-%EB%B6%84%EC%84%9D%EB%B2%95/</link>
      <pubDate>Sat, 14 Nov 2020 21:41:03 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-%EC%8B%A4%ED%96%89%EA%B3%84%ED%9A%8D-%EB%B6%84%EC%84%9D%EB%B2%95/</guid>
      <description>&lt;p&gt;쿼리문을 작성하다보면 해당 쿼리가 최선인지 애매한 순간이 있습니다. 이 때 DBMS에서 제공하는 실행계획 기능을 활용하면 더 나은 판단이 가능합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>스마트한 shared_ptr 스마트하게 지우는 법</title>
      <link>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</link>
      <pubDate>Sat, 14 Nov 2020 21:31:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</guid>
      <description>&lt;p&gt;스마트포인터 shared_ptr의 경우 참조 카운팅이 zero가 되어야 삭제 되는데, 그 시점이 약간 애매 할 수 있어 여러가지 처리를 해 줘야 합니다.&lt;/p&gt;

&lt;p&gt;shared_ptr 생성 시점에서 deleter를 전달 할 수 있고 이를 활용하면 스마트 포인터를 더욱 스마트하게 사용 할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL Merge문</title>
      <link>https://ence2.github.io/2020/11/mssql-merge%EB%AC%B8/</link>
      <pubDate>Sat, 14 Nov 2020 21:19:54 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-merge%EB%AC%B8/</guid>
      <description>&lt;p&gt;SQL Server 2008 부터 지원되는 MERGE문은 조건에 따라 INSERT, UPDATE ,DELETE등을 한 문장으로 간단히 실행할 수 있는 편리한 TSQL 문장입니다. MERGE가 없는 이전 버전의 경우 보통 IF문 등으로 조건을 먼저 체크하고 DML 문장(INSERT, UPDATE ,DELETE)을 각각 나눠서 여러 문장으로 기술해야 했습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kafka(카프카)란 무엇인가?</title>
      <link>https://ence2.github.io/2020/11/kafka%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Sat, 14 Nov 2020 21:00:32 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/kafka%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;서버간 통신을 할 때 서버간에 다이렉트로 소켓 연결이나, rest call 연결을 할 경우 복잡성이 매우 증가 할 수 있습니다. (최악의 경우 N^2)&lt;/p&gt;

&lt;p&gt;예를 들어 128대의 서버간 망형태로 연결이 필요 할 경우 16,384개의 연결이 필요합니다. 보통 이를 해결 하기 위해 중계 서버를 만들거나 메세지큐 형태의 서비스를 이용하는데 이러한 서비스를 제공하는 것이 Kafka라는 서비스입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ELK(ElasticSearch &#43; LogStash &#43; Kibana) Stack (번외 FluentD)</title>
      <link>https://ence2.github.io/2020/11/elkelasticsearch-logstash-kibana-stack-%EB%B2%88%EC%99%B8-fluentd/</link>
      <pubDate>Sat, 14 Nov 2020 20:11:21 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/elkelasticsearch-logstash-kibana-stack-%EB%B2%88%EC%99%B8-fluentd/</guid>
      <description>&lt;p&gt;대용량 서비스에서 각 장비에서 발생하는 로그를 한 장소에 모으고 해당 정보를 통합 모니터링 할 수 있는 시스템은 반드시 필요합니다.
장비가 몇 대 안될 경우 직접 장비에 접근하여 파일 로그를 살펴보며 이슈 대응이 가능하지만, 물리 장비가 수백, 수천대 일 경우는 참 난감한 상황입니다.&lt;/p&gt;

&lt;p&gt;이러한 상황을 해결하기 위한 로그 분석 모니터링 서비스를 구축 할 때 ElasticSearch + ( LogStash or FluentD ) + Kibana를 조합하여 많이 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 블로그에 Google Analytics 연결</title>
      <link>https://ence2.github.io/2020/11/hugo-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-google-analytics-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Sat, 14 Nov 2020 13:50:07 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/hugo-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-google-analytics-%EC%97%B0%EA%B2%B0/</guid>
      <description>&lt;p&gt;구글에서는 사이트 접근시 유입분석과 체류시간 등의 각종 통계 분석이 가능한 웹 기반 콘솔 서비스를 제공합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 블로그 검색 엔진에 등록하기</title>
      <link>https://ence2.github.io/2020/11/hugo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B2%80%EC%83%89-%EC%97%94%EC%A7%84%EC%97%90-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 14 Nov 2020 12:19:25 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/hugo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B2%80%EC%83%89-%EC%97%94%EC%A7%84%EC%97%90-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/</guid>
      <description>&lt;p&gt;Google이나 Naver에 블로그나 사이트를 노출시키기 위해서는 검색엔진 제공 업체의 검색콘솔 등에 직접 등록하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;등록해야 하는 파일은 비슷하지만, 회사마다 방법이 조금 달라 그 방법과 Hugo 기반 블로그에서 필요한 파일을 생성하는 방법을 소개합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>then과 unwrap을 활용한 future의 다중 연속 구현</title>
      <link>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</link>
      <pubDate>Fri, 13 Nov 2020 21:56:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 futue는 강력한 도구입니다.&lt;/p&gt;

&lt;p&gt;이전 포스팅에서 future와 then을 결합하여 연속 연결을 만드는 부분에 대하여 알아봤습니다.&lt;/p&gt;

&lt;p&gt;future를 리턴하는 3개 이상의 비동기 연속 연결을 만드려면 unwrap을 이용해야 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Perforce의 Time Lapse View (SVN의 Blame)</title>
      <link>https://ence2.github.io/2020/11/perforce%EC%9D%98-time-lapse-view-svn%EC%9D%98-blame/</link>
      <pubDate>Wed, 11 Nov 2020 21:57:54 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/perforce%EC%9D%98-time-lapse-view-svn%EC%9D%98-blame/</guid>
      <description>&lt;p&gt;SVN의 blame 기능은 소스코드 형상관리시 누가 언제 커밋을 했고 해당 소스코드의 어떤 변경내역이 있었는지&lt;/p&gt;

&lt;p&gt;한눈에 파악 할 수 있는 기능을 제공합니다.
Perforce에도 비슷한 기능이 있는데 바로 Time Lase View입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Google Coding Convention Style 정리</title>
      <link>https://ence2.github.io/2020/11/c-google-coding-convention-style-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Wed, 11 Nov 2020 21:25:16 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-google-coding-convention-style-%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;코딩 컨벤션이란 협업 관계에서 프로그래머 사이의 규칙입니다.&lt;/p&gt;

&lt;p&gt;컨벤션이 잘 되어 있을 경우 그 구조만으로 의도 파악이 쉽고(내부에서 Lock을 사용하는 함수를 바로 알아본다거나) 유지보수 비용과 버그를 줄일 수 있습니다.&lt;/p&gt;

&lt;p&gt;컨벤션 규칙은 다양하며 본인 스타일이 있더라도 회사에서 정하는 규칙이 있을 경우 따르는 것이 좋습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MsSQL with nolock</title>
      <link>https://ence2.github.io/2020/11/mssql-with-nolock/</link>
      <pubDate>Wed, 11 Nov 2020 21:13:26 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/mssql-with-nolock/</guid>
      <description>&lt;p&gt;MSSQL은 기본적으로 SELECT 시에 공유잠금(TRANSACTION ISOLATION READ COMMIT)이 걸리게 됩니다.&lt;/p&gt;

&lt;p&gt;MSSQL에서 SELECT 시에 &lt;strong&gt;WITH (NOLOCK)&lt;/strong&gt; 을 주면 공유잠금을 걸지 않고 바로 조회 수행합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM TABLE1 WITH (NOLOCK)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>std::for_each와 std::transform</title>
      <link>https://ence2.github.io/2020/11/stdfor_each%EC%99%80-stdtransform/</link>
      <pubDate>Tue, 10 Nov 2020 22:02:59 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdfor_each%EC%99%80-stdtransform/</guid>
      <description>&lt;h2 id=&#34;for-each&#34;&gt;for_each&lt;/h2&gt;

&lt;p&gt;&lt;algorithm&gt; 에 정의됨&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;class InputIterator, class Function&amp;gt;
Function for_each(InputIterator first, InputIterator last, Function fn);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;범위 내에 원소들에 대해 함수를 실행시킵니다.&lt;/p&gt;

&lt;p&gt;범위 내 (&lt;code&gt;first&lt;/code&gt; 부터 &lt;code&gt;last&lt;/code&gt; 전 까지) 원소들 각각에 대해 함수 &lt;code&gt;fn&lt;/code&gt; 을 실행한다. 참고로 함수의 리턴값은 무시됩니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke</title>
      <link>https://ence2.github.io/2020/11/stdinvoke/</link>
      <pubDate>Tue, 10 Nov 2020 21:56:37 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;

&lt;p&gt;지정 된 인수를 사용 하 여 호출 가능 개체를 호출 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke_result 클래스</title>
      <link>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Tue, 10 Nov 2020 21:44:03 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>&lt;p&gt;컴파일 타임에 지정 된 인수 형식을 사용 하는 호출 가능 형식의 반환 형식을 결정 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clustered, Nonclustered Index</title>
      <link>https://ence2.github.io/2020/11/clustered-nonclustered-index/</link>
      <pubDate>Mon, 09 Nov 2020 22:07:38 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/clustered-nonclustered-index/</guid>
      <description>&lt;h3 id=&#34;index란&#34;&gt;Index란&lt;/h3&gt;

&lt;p&gt;책의 목차와 비슷하게 데이터의 색인을 기록하여 검색 속도를 증가 시킬 수 있는 구조입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::atomic, memory_order</title>
      <link>https://ence2.github.io/2020/11/stdatomic-memory_order/</link>
      <pubDate>Mon, 09 Nov 2020 21:45:07 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdatomic-memory_order/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::atomic&amp;lt;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;동기화 객체 없이 원자적 계산 가능합니다..(CPU 지원 필요)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::atomic&amp;lt;int&amp;gt; x;
std::cout &amp;lt;&amp;lt; &amp;quot;is lock free ? : &amp;quot; &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; x.is_lock_free() &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is lock free가 true인 경우 CPU에서 지원 해주는 것입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boost::make_ready_future</title>
      <link>https://ence2.github.io/2020/11/boostmake_ready_future/</link>
      <pubDate>Mon, 09 Nov 2020 21:09:42 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/boostmake_ready_future/</guid>
      <description>&lt;h4 id=&#34;making-immediate-futures-easier&#34;&gt;Making immediate futures easier&lt;/h4&gt;

&lt;p&gt;일부 함수는 구성 시점에서 값을 알 수 있습니다. 이 경우 값을 즉시 사용할 수 있지만 future 또는 shared_future로 반환해야합니다. make_ready_future를 사용하면 공유 상태에서 미리 계산 된 결과를 보유하는 future를 만들 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boost Future의 continuations(연속 연결)</title>
      <link>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Sun, 08 Nov 2020 23:31:17 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 하나의 비동기 작업이 완료되면 두 번째 작업을 호출하고 여기에 데이터를 전달하는 것이 매우 일반적입니다. 현재 C ++ 표준은 future에 대한 연속 등록을 허용하지 않습니다. 를 사용하면 결과를 기다리는 대신 결과가 준비되면 호출되는 비동기 작업에 연속 작업이 &amp;ldquo;연결&amp;rdquo;됩니다. then 함수를 사용하여 등록 된 연속 futue는 대기를 차단하거나 폴링 스레드를 낭비하지 않도록하여 애플리케이션의 응답 성과 확장 성을 크게 향상시킵니다&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std upper_bound</title>
      <link>https://ence2.github.io/2020/11/std-upper_bound/</link>
      <pubDate>Sun, 08 Nov 2020 23:22:20 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/std-upper_bound/</guid>
      <description>&lt;h3 id=&#34;upper-bound&#34;&gt;upper_bound&lt;/h3&gt;

&lt;p&gt;컨테이너에서 지정된 키보다 큰 값을 가진 키가 포함된 첫 번째 요소에 대한 it를 반환합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#define 매크로, const와 차이점, 유의 사항</title>
      <link>https://ence2.github.io/2020/11/define-%EB%A7%A4%ED%81%AC%EB%A1%9C-const%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%9C%A0%EC%9D%98-%EC%82%AC%ED%95%AD/</link>
      <pubDate>Sun, 08 Nov 2020 23:10:09 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/define-%EB%A7%A4%ED%81%AC%EB%A1%9C-const%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%9C%A0%EC%9D%98-%EC%82%AC%ED%95%AD/</guid>
      <description>&lt;h3 id=&#34;define-상수&#34;&gt;#define 상수&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#define 상수명 값
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;define-지시문-매크로-함수&#34;&gt;#define 지시문 (매크로 함수)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#define 식별자(인수1, 인수2 ...) 토큰열
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>hpp 파일은 무엇인가?</title>
      <link>https://ence2.github.io/2020/11/hpp-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Sun, 08 Nov 2020 23:03:14 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/hpp-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;라이브러리를 사용하다보면 hpp 파일이 자주 보입니다. 이 파일은 무엇일까요?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cbegin, begin, rbegin, cend, end, rend 등의 차이점</title>
      <link>https://ence2.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</link>
      <pubDate>Sun, 08 Nov 2020 22:53:27 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</guid>
      <description>&lt;p&gt;C++의 STL 컨테이너들은 Iterator(반복자)를 통해서 내부에 있는 데이터의 한 위치를 가리킬 수가 있습니다.&lt;/p&gt;

&lt;p&gt;Iterator는 for 문을 돌리거나 STL이 제공하는 알고리즘을 실행할 때 사용하게 됩니다.&lt;/p&gt;

&lt;p&gt;begin(), end()는 순방향으로 움직일 때 사용하며, rbegin(), rend()는 역방향으로 움직일 때 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UPSERT 개념</title>
      <link>https://ence2.github.io/2020/11/upsert-%EA%B0%9C%EB%85%90/</link>
      <pubDate>Sun, 08 Nov 2020 22:43:22 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/upsert-%EA%B0%9C%EB%85%90/</guid>
      <description>&lt;h3 id=&#34;정의&#34;&gt;정의&lt;/h3&gt;

&lt;p&gt;간략하게 Update + Insert이며, Update 할 대상 row가 있을 경우 Update, 없을 경우 Insert입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 캐스팅 총정리(스마트포인터 캐스팅 포함)</title>
      <link>https://ence2.github.io/2020/11/c-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%8F%AC%ED%95%A8/</link>
      <pubDate>Sun, 08 Nov 2020 22:31:11 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%8F%AC%ED%95%A8/</guid>
      <description>&lt;p&gt;캐스트는 자료형간 또는 포인터간 형변환시 사용됩니다.&lt;/p&gt;

&lt;p&gt;캐스트는 크게 묵시적 캐스트(implicit cast)와 명시적 캐스트(explicit cast) 두 가지로 나눌 수 있습니다.&lt;/p&gt;

&lt;p&gt;특별히 캐스트 연산자를 사용하지 않고 형변환이 이루어지는 경우를 &amp;ldquo;묵시적 캐스트&amp;rdquo; 라고 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;   int i = 10;
   char c = i;         // 묵시적 캐스트
   char c = (char) i;  // 명시적 캐스트 (c-style)
   char c = static_cast&amp;lt;char&amp;gt;(i) // C++ style
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>컨테이너 삽입시 Insert와 Emplace 차이</title>
      <link>https://ence2.github.io/2020/11/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%82%BD%EC%9E%85%EC%8B%9C-insert%EC%99%80-emplace-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Sun, 08 Nov 2020 22:01:43 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%82%BD%EC%9E%85%EC%8B%9C-insert%EC%99%80-emplace-%EC%B0%A8%EC%9D%B4/</guid>
      <description>&lt;h3 id=&#34;insert와-emplace&#34;&gt;Insert와 Emplace&lt;/h3&gt;

&lt;p&gt;둘 다 컨테이너에 데이터를 삽입 하는 행위이나 차이가 있습니다.&lt;/p&gt;

&lt;p&gt;Insert로 삽입 시 Map의 경우 std::make_pair를 이용해야하며, emplace는 간단하게 삽입이 가능하며, 내부 동작 또한 다릅니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::tie 사용법</title>
      <link>https://ence2.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 08 Nov 2020 21:38:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>&lt;h3 id=&#34;std-tie&#34;&gt;std::tie&lt;/h3&gt;

&lt;p&gt;pair, tuple으로 묶인 녀석들을 던저서 여러 변수에 한번에 받아 올 수 있습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>