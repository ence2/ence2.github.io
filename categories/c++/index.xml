<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Keep calm carry on</title>
    <link>https://ence2.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Keep calm carry on</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 25 Oct 2021 07:00:00 +0900</lastBuildDate><atom:link href="https://ence2.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Concurrent - Parallel STL[5]</title>
      <link>https://ence2.github.io/2021/10/c-concurrent-parallel-stl5/</link>
      <pubDate>Mon, 25 Oct 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/10/c-concurrent-parallel-stl5/</guid>
      <description>&lt;p&gt;이번 시간에는 병렬 STL, atomic 스마트포인터에 대해 알아보겠습니다&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Concurrent - Atomic[4]</title>
      <link>https://ence2.github.io/2021/10/c-concurrent-atomic4/</link>
      <pubDate>Mon, 11 Oct 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/10/c-concurrent-atomic4/</guid>
      <description>&lt;p&gt;이번 시간에는 C++의 atomic, memory order 등에 관해서 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Concurrent - Synchronization[3]</title>
      <link>https://ence2.github.io/2021/09/c-concurrent-synchronization3/</link>
      <pubDate>Thu, 30 Sep 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/09/c-concurrent-synchronization3/</guid>
      <description>&lt;p&gt;이번에는 스레드 동기화 방법 대해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Concurrent - Promise / future / async[2]</title>
      <link>https://ence2.github.io/2021/09/c-concurrent-promise-/-future-/-async2/</link>
      <pubDate>Tue, 21 Sep 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/09/c-concurrent-promise-/-future-/-async2/</guid>
      <description>&lt;p&gt;이번 시간에는 C++의 비동기 처리 관련 기술을 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Concurrent - Thread Basic[1]</title>
      <link>https://ence2.github.io/2021/09/c-concurrent-thread-basic1/</link>
      <pubDate>Wed, 15 Sep 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/09/c-concurrent-thread-basic1/</guid>
      <description>&lt;p&gt;본 시리즈는 C++ 기반의 동시성 프로그래밍에 관한 내용입니다.
이번 시간에는 std::this_tread, chrono에 관해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design pattern in C&#43;&#43; - 객체를 생성하는 방법[6]</title>
      <link>https://ence2.github.io/2021/08/design-pattern-in-c-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%956/</link>
      <pubDate>Sat, 07 Aug 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/08/design-pattern-in-c-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%956/</guid>
      <description>&lt;p&gt;이번 시간에는 객체 생성 관련 패턴을 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design pattern in C&#43;&#43; - 통보, 열거, 방문[5]</title>
      <link>https://ence2.github.io/2021/08/design-pattern-in-c-%ED%86%B5%EB%B3%B4-%EC%97%B4%EA%B1%B0-%EB%B0%A9%EB%AC%B85/</link>
      <pubDate>Fri, 06 Aug 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/08/design-pattern-in-c-%ED%86%B5%EB%B3%B4-%EC%97%B4%EA%B1%B0-%EB%B0%A9%EB%AC%B85/</guid>
      <description>&lt;p&gt;이번 시간에는 Observer 패턴, Container 설계의 기술, Iterator 패턴, Visitor 패턴에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design pattern in C&#43;&#43; - 간접층의 원리[4]</title>
      <link>https://ence2.github.io/2021/08/design-pattern-in-c-%EA%B0%84%EC%A0%91%EC%B8%B5%EC%9D%98-%EC%9B%90%EB%A6%AC4/</link>
      <pubDate>Mon, 02 Aug 2021 07:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/08/design-pattern-in-c-%EA%B0%84%EC%A0%91%EC%B8%B5%EC%9D%98-%EC%9B%90%EB%A6%AC4/</guid>
      <description>&lt;p&gt;이번 시간에는 Adapter, Proxy, Facade, Bridge에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design pattern in C&#43;&#43; - 재귀적 포함[3]</title>
      <link>https://ence2.github.io/2021/07/design-pattern-in-c-%EC%9E%AC%EA%B7%80%EC%A0%81-%ED%8F%AC%ED%95%A83/</link>
      <pubDate>Sat, 31 Jul 2021 09:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/07/design-pattern-in-c-%EC%9E%AC%EA%B7%80%EC%A0%81-%ED%8F%AC%ED%95%A83/</guid>
      <description>&lt;p&gt;이번시간에는 Composite 패턴, Decorator 패턴에 대해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design pattern in C&#43;&#43; - 공통성과 가변성의 분리[2]</title>
      <link>https://ence2.github.io/2021/07/design-pattern-in-c-%EA%B3%B5%ED%86%B5%EC%84%B1%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%84%B1%EC%9D%98-%EB%B6%84%EB%A6%AC2/</link>
      <pubDate>Fri, 30 Jul 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/07/design-pattern-in-c-%EA%B3%B5%ED%86%B5%EC%84%B1%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%84%B1%EC%9D%98-%EB%B6%84%EB%A6%AC2/</guid>
      <description>&lt;p&gt;이번시간에는 변하는 것을 분리하는 방법, 단위 전략 디자인, 상태 패턴 등에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design pattern in C&#43;&#43; - Intro[1]</title>
      <link>https://ence2.github.io/2021/07/design-pattern-in-c-intro1/</link>
      <pubDate>Wed, 28 Jul 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/07/design-pattern-in-c-intro1/</guid>
      <description>&lt;p&gt;디자인 패턴의 개념, protected constructor, upcasting, coupling, 객체지향 등에 대해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - Concurrency[7]</title>
      <link>https://ence2.github.io/2021/07/c-stl-concurrency7/</link>
      <pubDate>Sat, 10 Jul 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/07/c-stl-concurrency7/</guid>
      <description>&lt;p&gt;이번 시간에는 STL의 동시성 처리 관련 라이브러리를 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - Algorithm[4]</title>
      <link>https://ence2.github.io/2021/06/c-stl-algorithm4/</link>
      <pubDate>Mon, 28 Jun 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/06/c-stl-algorithm4/</guid>
      <description>&lt;p&gt;이번 시간에는 STL의 알고리즘에 관해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - Iterator[3]</title>
      <link>https://ence2.github.io/2021/06/c-stl-iterator3/</link>
      <pubDate>Sun, 27 Jun 2021 21:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/06/c-stl-iterator3/</guid>
      <description>&lt;p&gt;이번 시간에는 iterator와 range에 대해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - Container[5]</title>
      <link>https://ence2.github.io/2021/06/c-stl-container5/</link>
      <pubDate>Sun, 27 Jun 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/06/c-stl-container5/</guid>
      <description>&lt;p&gt;이번 시간에는 STL의 Container에 대해서 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - Utility[6]</title>
      <link>https://ence2.github.io/2021/06/c-stl-utility6/</link>
      <pubDate>Sun, 27 Jun 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/06/c-stl-utility6/</guid>
      <description>&lt;p&gt;이번 시간에는 STL의 스마트 포인터, &lt;!-- raw HTML omitted --&gt;, &lt;!-- raw HTML omitted --&gt;에 대해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - STL 설계 철학[2]</title>
      <link>https://ence2.github.io/2021/06/c-stl-stl-%EC%84%A4%EA%B3%84-%EC%B2%A0%ED%95%992/</link>
      <pubDate>Sat, 26 Jun 2021 09:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/06/c-stl-stl-%EC%84%A4%EA%B3%84-%EC%B2%A0%ED%95%992/</guid>
      <description>&lt;p&gt;이번 시간에는 다음 내용을 살펴보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;제너릭 알고리즘의 개념, 컨테이너와 알고리즘의 연결(iterator)&lt;/li&gt;
&lt;li&gt;STL의 구조와 유사한 방식으로 간략한 라이브러리 설계&lt;/li&gt;
&lt;li&gt;예제&lt;/li&gt;
&lt;li&gt;C++17 이후의 STL 변화&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL - Preview[1]</title>
      <link>https://ence2.github.io/2021/06/c-stl-preview1/</link>
      <pubDate>Sat, 26 Jun 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/06/c-stl-preview1/</guid>
      <description>&lt;p&gt;C++ 표준 라이브러리인 STL에 대해서 학습하는 시리즈입니다. 단순한 STL의 사용법 뿐 아니라 STL의 주요 요소를 직접 구현해 보면서 STL의 설계 철학도 배우게 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;STL의 단순한 개념뿐 아니라 iterator_category, iterator_traits 등의 깊이 있는 개념을 배우게 됩니다.&lt;/li&gt;
&lt;li&gt;shared_ptr&amp;lt;&amp;gt;, weak_ptr&amp;lt;&amp;gt;, unique_ptr&amp;lt;&amp;gt;등의 스마트 포인터에 대해서 배우게 됩니다.&lt;/li&gt;
&lt;li&gt;thread/future/async 등 스레드 관련 라이브러리를 배우게 됩니다.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - Lambda expression[9]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-lambda-expression9/</link>
      <pubDate>Wed, 28 Apr 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-lambda-expression9/</guid>
      <description>&lt;p&gt;Lambda expression과 관련한 인라인 함수, function object, 람다 표현, closure object, 캡쳐 변수, 고급 람다 표현, invoke 등에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - Perfect forwarding[8]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-perfect-forwarding8/</link>
      <pubDate>Tue, 27 Apr 2021 06:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-perfect-forwarding8/</guid>
      <description>&lt;p&gt;Perfect forwarding 의 개념과 구현 방법을 배웁니다. forwarding reference 를 사용한 perfect forwarding을 알아 보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - rvalue와 lvalue, move semantics[7]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-rvalue%EC%99%80-lvalue-move-semantics7/</link>
      <pubDate>Mon, 26 Apr 2021 09:30:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-rvalue%EC%99%80-lvalue-move-semantics7/</guid>
      <description>&lt;p&gt;임시 객체,  rvalue, lvalue, 레퍼런스 붕괴 규칙, 우측값 참조, move semantics에 대해 알아 보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - C&#43;&#43; auto decltype type deduction[6]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-auto-decltype-type-deduction6/</link>
      <pubDate>Thu, 22 Apr 2021 02:30:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-auto-decltype-type-deduction6/</guid>
      <description>&lt;p&gt;C++11에서 추가된 auto/decltype 문법은 쉬워 보이지만 컴파일러가 타입을 결정하는 규칙은 쉽지 않습니다. 또한, 배열과 auto 관계를 정확하게 이해 하기 위해서는 배열 이름의 의미를 정확히 파악하는 것이 좋습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - C&#43;&#43; 객체 초기화[5]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%945/</link>
      <pubDate>Thu, 22 Apr 2021 00:30:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%945/</guid>
      <description>&lt;p&gt;C++11의 등장으로 객체를 초기화 하는 방법에는 많은 변화가 생겼습니다. 기존 초기화 방식의 문제점을 살펴 보고, &amp;ldquo;uniform initialization&amp;rdquo;, &amp;ldquo;direct vs copy&amp;rdquo;, &amp;ldquo;defalue vs value&amp;rdquo; 등 새로운 초기화 방법에 대해 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - C&#43;&#43; 17 기본 문법[4]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-17-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%954/</link>
      <pubDate>Wed, 21 Apr 2021 09:50:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-17-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%954/</guid>
      <description>&lt;p&gt;C++17 에서 추가된 다양한 문법을 빠르게 소개합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - C&#43;&#43; 11 14 기본 문법[3]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-11-14-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%953/</link>
      <pubDate>Tue, 20 Apr 2021 09:50:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-11-14-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%953/</guid>
      <description>&lt;p&gt;C++11/14 에서 추가된 다양한 문법을 빠르게 소개합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - C&#43;&#43; 중요 기본 문법 다시보기[2]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-%EC%A4%91%EC%9A%94-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B02/</link>
      <pubDate>Thu, 15 Apr 2021 10:50:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-%EC%A4%91%EC%9A%94-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B02/</guid>
      <description>&lt;p&gt;C++ 버전과 역사에 대해서 알아보고, 기본 문법의 This call, New, Name mangling, Conversion 등에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법 테크닉 - 개요[1]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-%EA%B0%9C%EC%9A%941/</link>
      <pubDate>Thu, 15 Apr 2021 09:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-%EA%B0%9C%EC%9A%941/</guid>
      <description>&lt;p&gt;C++ 관련 고급 문법과 다양한 고급 테크닉을 공부하겠습니다. C++ 언어의 문법들을 다양한 관점에서 깊이 있게 살펴 보고, C++ 진영에서 사용되는 다양한 코딩 관례, 테크닉을 깊이 있는 관점에서 배우게 됩니다. C++98/03 문법 뿐 아니라 C++11/14 그리고 C++17/20의 내용도 배우게 됩니다.&lt;/p&gt;
&lt;p&gt;C++ 문법 뿐 아니라 C++ IDioms라고 알려져 있는 다양한 테크닉도 배우게 되며, 이 시리즈에서는 C++ 기본 문법을 다루지 않습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template Design[7]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-design7/</link>
      <pubDate>Fri, 09 Apr 2021 12:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-design7/</guid>
      <description>&lt;p&gt;이번에는 템플릿 코드의 메모리 사용량을 줄이는 방법, CRTP, SFINAE typelinst 등에 대해서 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Variadic Template[6]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-variadic-template6/</link>
      <pubDate>Thu, 08 Apr 2021 18:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-variadic-template6/</guid>
      <description>&lt;p&gt;이번 포스팅에서는 C++11 에서 추가된 가변인자 템플릿의 기본 문법과 활용에 대해서 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Type Traits[5]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-type-traits5/</link>
      <pubDate>Wed, 07 Apr 2021 16:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-type-traits5/</guid>
      <description>&lt;p&gt;이번 항목에서는 타입의 다양한 속성을 조사하는 traits 개념을 알아 보겠습니다. std 표준의 is_pointer, is_array 등이 내부적으로 traits를 통해 구현 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template 특수화[4]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-%ED%8A%B9%EC%88%98%ED%99%944/</link>
      <pubDate>Tue, 06 Apr 2021 18:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-%ED%8A%B9%EC%88%98%ED%99%944/</guid>
      <description>&lt;p&gt;이번 포스팅에서는 template specialization, partial specialization, template meta programming에 대해서 알아보겠습니다. 다양한 템플릿 기술의 근본이 되는 아주 중요한 개념입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template 기본 문법[3]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%953/</link>
      <pubDate>Tue, 06 Apr 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%953/</guid>
      <description>&lt;p&gt;이번 항목에서는 템플릿의 기본 문법에 대해서 살펴 보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template Instantiation[2]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-instantiation2/</link>
      <pubDate>Mon, 05 Apr 2021 16:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-instantiation2/</guid>
      <description>&lt;p&gt;이번 항목에서는 C++ 템플릿의 기본 개념에 대해서 배우게 됩니다. 비교적 쉬운 내용이지만, 뒷 부분의 다양한 고급 기법을 정확히 이해 하려면 반드시 정확하게 이해 해야 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Intro[1]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-intro1/</link>
      <pubDate>Mon, 05 Apr 2021 09:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-intro1/</guid>
      <description>&lt;p&gt;C++의 Template 기술은 C++ 에서 가장 신기하고, 재미있고, 깊이있는 분야 입니다. C++로 만들어진 다양한 라이브러리 안에는 Template 을 사용한 고급 코드를 많이 볼수 있습니다. 하지만, Template 은 일반 개발자가 아닌 라이브러리 설계자들이 널리 사용하는 기술이기 때문에, 대부분의 C++ 교육에서는 Template 의 개념 정도만 다루고 있습니다. 그래서, 오픈소스에서 볼수 있는 다양한 고급 기법을 정확히 이해하기는 어려움이 있습니다. 또한, C++의 표준 라이브러리인 STL을 깊이 있게 이해 하기 위해서도 Template 기술은 필수입니다. 이 시리즈는 C++언어의 Template 분야에 대한 다양한 문법과 기법을 배우는 과정입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::advance 예제</title>
      <link>https://ence2.github.io/2020/11/stdadvance-%EC%98%88%EC%A0%9C/</link>
      <pubDate>Sun, 29 Nov 2020 22:59:40 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdadvance-%EC%98%88%EC%A0%9C/</guid>
      <description>&lt;p&gt;iterator를 원하는 위치로 옮길 수 있는 함수이다. 컨테이너의 iterator를 i번째 위치로 옮기고 싶을 때 사용할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>함수처럼 매개변수를 갖는 매크로</title>
      <link>https://ence2.github.io/2020/11/%ED%95%A8%EC%88%98%EC%B2%98%EB%9F%BC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%96%EB%8A%94-%EB%A7%A4%ED%81%AC%EB%A1%9C/</link>
      <pubDate>Sun, 29 Nov 2020 21:29:12 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%ED%95%A8%EC%88%98%EC%B2%98%EB%9F%BC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%96%EB%8A%94-%EB%A7%A4%ED%81%AC%EB%A1%9C/</guid>
      <description>&lt;p&gt;#define 매크로 정의시 단순 상수 정의는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#define PI   (3.141592)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;매크로를 활용 하여 인라인 함수 형태로 작성 할 때 매개변수를 전달 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#define CIRCLE(x) ((x)&lt;em&gt;(x)&lt;/em&gt;(PI))&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnitTesting 관련 Google Test, gMock 정리</title>
      <link>https://ence2.github.io/2020/11/unittesting-%EA%B4%80%EB%A0%A8-google-test-gmock-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Thu, 26 Nov 2020 18:33:54 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/unittesting-%EA%B4%80%EB%A0%A8-google-test-gmock-%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;유닛 테스트는 프로그램의 품질과 안정성을 향상시킬 수 있지만 꽤나 번거로운 작업이고 어느정도의 테스트 케이스를 로직과 pair로 작성해야 하기 때문에 관리 비용이 들지만, 이러한 테스팅 환경을 구축하고 습관화 할 경우 어느날 치명적인 버그를 막아주는 경우가 있습닙니다. C#에서는 nUnit이라는 라이브러리를 사용했었는데, C++ 환경에서 Google Test 사용이 필요하여 관련 리서치 내용을 포스팅합닙니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 변수 타입 최대 최소값 편리하게 확인하는 방법 std::numeric_limits</title>
      <link>https://ence2.github.io/2020/11/c-%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%EC%B5%9C%EB%8C%80-%EC%B5%9C%EC%86%8C%EA%B0%92-%ED%8E%B8%EB%A6%AC%ED%95%98%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-stdnumeric_limits/</link>
      <pubDate>Thu, 26 Nov 2020 12:31:52 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%EC%B5%9C%EB%8C%80-%EC%B5%9C%EC%86%8C%EA%B0%92-%ED%8E%B8%EB%A6%AC%ED%95%98%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-stdnumeric_limits/</guid>
      <description>&lt;p&gt;numeric_limits 클래스 템플릿은 템플릿 특수화로 구현되었고, 명시한 타입의 최대값이나 최소값을 질의 할 수 있는 표준화 된 방법을 제공합니다.&lt;/p&gt;
&lt;p&gt;(예 : int 유형에 대해 가능한 가장 큰 값은 std :: numeric_limits &lt;!-- raw HTML omitted --&gt; :: max ())&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::lock_guard</title>
      <link>https://ence2.github.io/2020/11/stdlock_guard/</link>
      <pubDate>Sat, 14 Nov 2020 22:48:24 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdlock_guard/</guid>
      <description>&lt;h4 id=&#34;stdlock_guard&#34;&gt;std::lock_guard&lt;/h4&gt;
&lt;p&gt;std::lock_guard는 객체 생성 시에 lock되며 객체가 소멸시에 unlock 되는 특성을 가지고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::chrono::high_resolution_clock</title>
      <link>https://ence2.github.io/2020/11/stdchronohigh_resolution_clock/</link>
      <pubDate>Sat, 14 Nov 2020 22:26:09 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdchronohigh_resolution_clock/</guid>
      <description>&lt;p&gt;5 years a go I’ve showed how to &lt;a href=&#34;https://www.guyrutenberg.com/2007/09/22/profiling-code-using-clock_gettime/&#34;&gt;use &lt;code&gt;clock_gettime&lt;/code&gt;&lt;/a&gt; to do basic high_resolution profiling. The approach there is very useful, but unfortunately, not cross-platform. It works only on POSIX compliant systems (especially not windows).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SRW Lock</title>
      <link>https://ence2.github.io/2020/11/srw-lock/</link>
      <pubDate>Sat, 14 Nov 2020 22:16:16 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/srw-lock/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/ko-kr/library/windows/desktop/aa904937(v=vs.85).aspx&#34;&gt;Slim Reader Writer Lock&lt;/a&gt;은 VS2010부터 지원되는 새로운 쓰레드 동기화 객체입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>스마트한 shared_ptr 스마트하게 지우는 법</title>
      <link>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</link>
      <pubDate>Sat, 14 Nov 2020 21:31:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</guid>
      <description>&lt;p&gt;스마트포인터 shared_ptr의 경우 참조 카운팅이 zero가 되어야 삭제 되는데, 그 시점이 약간 애매 할 수 있어 여러가지 처리를 해 줘야 합니다.&lt;/p&gt;
&lt;p&gt;shared_ptr 생성 시점에서 deleter를 전달 할 수 있고 이를 활용하면 스마트 포인터를 더욱 스마트하게 사용 할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>then과 unwrap을 활용한 future의 다중 연속 구현</title>
      <link>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</link>
      <pubDate>Fri, 13 Nov 2020 21:56:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 futue는 강력한 도구입니다.&lt;/p&gt;
&lt;p&gt;이전 포스팅에서 future와 then을 결합하여 연속 연결을 만드는 부분에 대하여 알아봤습니다.&lt;/p&gt;
&lt;p&gt;future를 리턴하는 3개 이상의 비동기 연속 연결을 만드려면 unwrap을 이용해야 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::for_each와 std::transform</title>
      <link>https://ence2.github.io/2020/11/stdfor_each%EC%99%80-stdtransform/</link>
      <pubDate>Tue, 10 Nov 2020 22:02:59 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdfor_each%EC%99%80-stdtransform/</guid>
      <description>&lt;h2 id=&#34;for_each&#34;&gt;for_each&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 에 정의됨&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
Function for_each(InputIterator first, InputIterator last, Function fn);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;범위 내에 원소들에 대해 함수를 실행시킵니다.&lt;/p&gt;
&lt;p&gt;범위 내 (&lt;code&gt;first&lt;/code&gt; 부터 &lt;code&gt;last&lt;/code&gt; 전 까지) 원소들 각각에 대해 함수 &lt;code&gt;fn&lt;/code&gt; 을 실행한다. 참고로 함수의 리턴값은 무시됩니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke</title>
      <link>https://ence2.github.io/2020/11/stdinvoke/</link>
      <pubDate>Tue, 10 Nov 2020 21:56:37 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;지정 된 인수를 사용 하 여 호출 가능 개체를 호출 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke_result 클래스</title>
      <link>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Tue, 10 Nov 2020 21:44:03 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>&lt;p&gt;컴파일 타임에 지정 된 인수 형식을 사용 하는 호출 가능 형식의 반환 형식을 결정 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::atomic, memory_order</title>
      <link>https://ence2.github.io/2020/11/stdatomic-memory_order/</link>
      <pubDate>Mon, 09 Nov 2020 21:45:07 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdatomic-memory_order/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;atomic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;동기화 객체 없이 원자적 계산 가능합니다..(CPU 지원 필요)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;atomic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; x;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is lock free ? : &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boolalpha &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.is_lock_free() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is lock free가 true인 경우 CPU에서 지원 해주는 것입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boost::make_ready_future</title>
      <link>https://ence2.github.io/2020/11/boostmake_ready_future/</link>
      <pubDate>Mon, 09 Nov 2020 21:09:42 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/boostmake_ready_future/</guid>
      <description>&lt;h4 id=&#34;making-immediate-futures-easier&#34;&gt;Making immediate futures easier&lt;/h4&gt;
&lt;p&gt;일부 함수는 구성 시점에서 값을 알 수 있습니다. 이 경우 값을 즉시 사용할 수 있지만 future 또는 shared_future로 반환해야합니다. make_ready_future를 사용하면 공유 상태에서 미리 계산 된 결과를 보유하는 future를 만들 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boost Future의 continuations(연속 연결)</title>
      <link>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Sun, 08 Nov 2020 23:31:17 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 하나의 비동기 작업이 완료되면 두 번째 작업을 호출하고 여기에 데이터를 전달하는 것이 매우 일반적입니다. 현재 C ++ 표준은 future에 대한 연속 등록을 허용하지 않습니다. 를 사용하면 결과를 기다리는 대신 결과가 준비되면 호출되는 비동기 작업에 연속 작업이 &amp;ldquo;연결&amp;quot;됩니다. then 함수를 사용하여 등록 된 연속 futue는 대기를 차단하거나 폴링 스레드를 낭비하지 않도록하여 애플리케이션의 응답 성과 확장 성을 크게 향상시킵니다&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std upper_bound</title>
      <link>https://ence2.github.io/2020/11/std-upper_bound/</link>
      <pubDate>Sun, 08 Nov 2020 23:22:20 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/std-upper_bound/</guid>
      <description>&lt;h3 id=&#34;upper_bound&#34;&gt;upper_bound&lt;/h3&gt;
&lt;p&gt;컨테이너에서 지정된 키보다 큰 값을 가진 키가 포함된 첫 번째 요소에 대한 it를 반환합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>define 매크로, const와 차이점, 유의 사항</title>
      <link>https://ence2.github.io/2020/11/define-%EB%A7%A4%ED%81%AC%EB%A1%9C-const%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%9C%A0%EC%9D%98-%EC%82%AC%ED%95%AD/</link>
      <pubDate>Sun, 08 Nov 2020 23:10:09 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/define-%EB%A7%A4%ED%81%AC%EB%A1%9C-const%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%9C%A0%EC%9D%98-%EC%82%AC%ED%95%AD/</guid>
      <description>&lt;h3 id=&#34;define-상수&#34;&gt;#define 상수&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define 상수명 값
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;define-지시문-매크로-함수&#34;&gt;#define 지시문 (매크로 함수)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define 식별자(인수1, 인수2 ...) 토큰열
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>hpp 파일은 무엇인가?</title>
      <link>https://ence2.github.io/2020/11/hpp-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Sun, 08 Nov 2020 23:03:14 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/hpp-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;라이브러리를 사용하다보면 hpp 파일이 자주 보입니다. 이 파일은 무엇일까요?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cbegin, begin, rbegin, cend, end, rend 등의 차이점</title>
      <link>https://ence2.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</link>
      <pubDate>Sun, 08 Nov 2020 22:53:27 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</guid>
      <description>&lt;p&gt;C++의 STL 컨테이너들은 Iterator(반복자)를 통해서 내부에 있는 데이터의 한 위치를 가리킬 수가 있습니다.&lt;/p&gt;
&lt;p&gt;Iterator는 for 문을 돌리거나 STL이 제공하는 알고리즘을 실행할 때 사용하게 됩니다.&lt;/p&gt;
&lt;p&gt;begin(), end()는 순방향으로 움직일 때 사용하며, rbegin(), rend()는 역방향으로 움직일 때 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 캐스팅 총정리(스마트포인터 캐스팅 포함)</title>
      <link>https://ence2.github.io/2020/11/c-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%8F%AC%ED%95%A8/</link>
      <pubDate>Sun, 08 Nov 2020 22:31:11 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%8F%AC%ED%95%A8/</guid>
      <description>&lt;p&gt;캐스트는 자료형간 또는 포인터간 형변환시 사용됩니다.&lt;/p&gt;
&lt;p&gt;캐스트는 크게 묵시적 캐스트(implicit cast)와 명시적 캐스트(explicit cast) 두 가지로 나눌 수 있습니다.&lt;/p&gt;
&lt;p&gt;특별히 캐스트 연산자를 사용하지 않고 형변환이 이루어지는 경우를 &amp;ldquo;묵시적 캐스트&amp;rdquo; 라고 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;         &lt;span style=&#34;color:#75715e&#34;&gt;// 묵시적 캐스트
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;) i;  &lt;span style=&#34;color:#75715e&#34;&gt;// 명시적 캐스트 (c-style)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(i) &lt;span style=&#34;color:#75715e&#34;&gt;// C++ style
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>컨테이너 삽입시 Insert와 Emplace 차이</title>
      <link>https://ence2.github.io/2020/11/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%82%BD%EC%9E%85%EC%8B%9C-insert%EC%99%80-emplace-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Sun, 08 Nov 2020 22:01:43 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%82%BD%EC%9E%85%EC%8B%9C-insert%EC%99%80-emplace-%EC%B0%A8%EC%9D%B4/</guid>
      <description>&lt;h3 id=&#34;insert와-emplace&#34;&gt;Insert와 Emplace&lt;/h3&gt;
&lt;p&gt;둘 다 컨테이너에 데이터를 삽입 하는 행위이나 차이가 있습니다.&lt;/p&gt;
&lt;p&gt;Insert로 삽입 시 Map의 경우 std::make_pair를 이용해야하며, emplace는 간단하게 삽입이 가능하며, 내부 동작 또한 다릅니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::tie 사용법</title>
      <link>https://ence2.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 08 Nov 2020 21:38:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>&lt;h3 id=&#34;stdtie&#34;&gt;std::tie&lt;/h3&gt;
&lt;p&gt;pair, tuple으로 묶인 녀석들을 던저서 여러 변수에 한번에 받아 올 수 있습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
