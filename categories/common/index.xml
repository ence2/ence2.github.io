<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common on Keep calm carry on</title>
    <link>https://ence2.github.io/categories/common/</link>
    <description>Recent content in Common on Keep calm carry on</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 26 Nov 2020 18:33:54 +0900</lastBuildDate>
    
	<atom:link href="https://ence2.github.io/categories/common/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UnitTesting 관련 Google Test, gMock 정리</title>
      <link>https://ence2.github.io/2020/11/unittesting-%EA%B4%80%EB%A0%A8-google-test-gmock-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Thu, 26 Nov 2020 18:33:54 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/unittesting-%EA%B4%80%EB%A0%A8-google-test-gmock-%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;유닛 테스트는 프로그램의 품질과 안정성을 향상시킬 수 있지만 꽤나 번거로운 작업이고 어느정도의 테스트 케이스를 로직과 pair로 작성해야 하기 때문에 관리 비용이 들지만, 이러한 테스팅 환경을 구축하고 습관화 할 경우 어느날 치명적인 버그를 막아주는 경우가 있습닙니다. C#에서는 nUnit이라는 라이브러리를 사용했었는데, C++ 환경에서 Google Test 사용이 필요하여 관련 리서치 내용을 포스팅합닙니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>모나드(Monad)란 무엇인가?</title>
      <link>https://ence2.github.io/2020/11/%EB%AA%A8%EB%82%98%EB%93%9Cmonad%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Wed, 18 Nov 2020 21:43:34 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EB%AA%A8%EB%82%98%EB%93%9Cmonad%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;하스켈에서 모나드는 매우 유용하지만 처음에는 그 개념이 꽤 어렵습니다. 모나드는 수많은 응용이 있기 때문에 사람들은 모나드를 특정 관점에서만 설명하는 경향이 있는데, 그러면 여러분이 모나드를 완벽히 이해하는 데 혼란을 줄 수도 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>visual studio 디버깅 팁</title>
      <link>https://ence2.github.io/2020/11/visual-studio-%EB%94%94%EB%B2%84%EA%B9%85-%ED%8C%81/</link>
      <pubDate>Mon, 16 Nov 2020 21:30:53 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/visual-studio-%EB%94%94%EB%B2%84%EA%B9%85-%ED%8C%81/</guid>
      <description>&lt;p&gt;&lt;strong&gt;디버그 코드 변경 내용 적용 ALT + F10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;편집하며 계속하기를 시작하여 디버그 중인 코드에 변경 내용을 적용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kafka(카프카)란 무엇인가?</title>
      <link>https://ence2.github.io/2020/11/kafka%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Sat, 14 Nov 2020 21:00:32 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/kafka%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;서버간 통신을 할 때 서버간에 다이렉트로 소켓 연결이나, rest call 연결을 할 경우 복잡성이 매우 증가 할 수 있습니다. (최악의 경우 N^2)&lt;/p&gt;

&lt;p&gt;예를 들어 128대의 서버간 망형태로 연결이 필요 할 경우 16,384개의 연결이 필요합니다. 보통 이를 해결 하기 위해 중계 서버를 만들거나 메세지큐 형태의 서비스를 이용하는데 이러한 서비스를 제공하는 것이 Kafka라는 서비스입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ELK(ElasticSearch &#43; LogStash &#43; Kibana) Stack (번외 FluentD)</title>
      <link>https://ence2.github.io/2020/11/elkelasticsearch-logstash-kibana-stack-%EB%B2%88%EC%99%B8-fluentd/</link>
      <pubDate>Sat, 14 Nov 2020 20:11:21 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/elkelasticsearch-logstash-kibana-stack-%EB%B2%88%EC%99%B8-fluentd/</guid>
      <description>&lt;p&gt;대용량 서비스에서 각 장비에서 발생하는 로그를 한 장소에 모으고 해당 정보를 통합 모니터링 할 수 있는 시스템은 반드시 필요합니다.
장비가 몇 대 안될 경우 직접 장비에 접근하여 파일 로그를 살펴보며 이슈 대응이 가능하지만, 물리 장비가 수백, 수천대 일 경우는 참 난감한 상황입니다.&lt;/p&gt;

&lt;p&gt;이러한 상황을 해결하기 위한 로그 분석 모니터링 서비스를 구축 할 때 ElasticSearch + ( LogStash or FluentD ) + Kibana를 조합하여 많이 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Google Coding Convention Style 정리</title>
      <link>https://ence2.github.io/2020/11/c-google-coding-convention-style-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Wed, 11 Nov 2020 21:25:16 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-google-coding-convention-style-%EC%A0%95%EB%A6%AC/</guid>
      <description>&lt;p&gt;코딩 컨벤션이란 협업 관계에서 프로그래머 사이의 규칙입니다.&lt;/p&gt;

&lt;p&gt;컨벤션이 잘 되어 있을 경우 그 구조만으로 의도 파악이 쉽고(내부에서 Lock을 사용하는 함수를 바로 알아본다거나) 유지보수 비용과 버그를 줄일 수 있습니다.&lt;/p&gt;

&lt;p&gt;컨벤션 규칙은 다양하며 본인 스타일이 있더라도 회사에서 정하는 규칙이 있을 경우 따르는 것이 좋습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>