<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modern C&#43;&#43; on Keep calm carry on</title>
    <link>https://ence2.github.io/tags/modern-c&#43;&#43;/</link>
    <description>Recent content in Modern C&#43;&#43; on Keep calm carry on</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 05 Jan 2021 15:58:30 +0900</lastBuildDate>
    
	<atom:link href="https://ence2.github.io/tags/modern-c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;20 스터디 소개[1]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EC%8A%A4%ED%84%B0%EB%94%94-%EC%86%8C%EA%B0%9C1/</link>
      <pubDate>Tue, 05 Jan 2021 15:58:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EC%8A%A4%ED%84%B0%EB%94%94-%EC%86%8C%EA%B0%9C1/</guid>
      <description>&lt;p&gt;C++20 과정 스터디 기록 관련 시리즈입니다.
C++20 에 추가된 다양한 문법과 라이브러리를 정리합니다.
본 포스팅에서는 간략한 특징을 소개합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>스마트한 shared_ptr 스마트하게 지우는 법</title>
      <link>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</link>
      <pubDate>Sat, 14 Nov 2020 21:31:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</guid>
      <description>&lt;p&gt;스마트포인터 shared_ptr의 경우 참조 카운팅이 zero가 되어야 삭제 되는데, 그 시점이 약간 애매 할 수 있어 여러가지 처리를 해 줘야 합니다.&lt;/p&gt;

&lt;p&gt;shared_ptr 생성 시점에서 deleter를 전달 할 수 있고 이를 활용하면 스마트 포인터를 더욱 스마트하게 사용 할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>then과 unwrap을 활용한 future의 다중 연속 구현</title>
      <link>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</link>
      <pubDate>Fri, 13 Nov 2020 21:56:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 futue는 강력한 도구입니다.&lt;/p&gt;

&lt;p&gt;이전 포스팅에서 future와 then을 결합하여 연속 연결을 만드는 부분에 대하여 알아봤습니다.&lt;/p&gt;

&lt;p&gt;future를 리턴하는 3개 이상의 비동기 연속 연결을 만드려면 unwrap을 이용해야 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke_result 클래스</title>
      <link>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Tue, 10 Nov 2020 21:44:03 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>&lt;p&gt;컴파일 타임에 지정 된 인수 형식을 사용 하는 호출 가능 형식의 반환 형식을 결정 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boost Future의 continuations(연속 연결)</title>
      <link>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Sun, 08 Nov 2020 23:31:17 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 하나의 비동기 작업이 완료되면 두 번째 작업을 호출하고 여기에 데이터를 전달하는 것이 매우 일반적입니다. 현재 C ++ 표준은 future에 대한 연속 등록을 허용하지 않습니다. 를 사용하면 결과를 기다리는 대신 결과가 준비되면 호출되는 비동기 작업에 연속 작업이 &amp;ldquo;연결&amp;rdquo;됩니다. then 함수를 사용하여 등록 된 연속 futue는 대기를 차단하거나 폴링 스레드를 낭비하지 않도록하여 애플리케이션의 응답 성과 확장 성을 크게 향상시킵니다&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>