<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modern C&#43;&#43; on Keep calm carry on</title>
    <link>https://ence2.github.io/tags/modern-c&#43;&#43;/</link>
    <description>Recent content in Modern C&#43;&#43; on Keep calm carry on</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 15 Apr 2021 10:50:00 +0900</lastBuildDate>
    
	<atom:link href="https://ence2.github.io/tags/modern-c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; 고급 문법/테크닉 - C&#43;&#43; 중요 기본 문법 다시보기[2]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-%EC%A4%91%EC%9A%94-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B02/</link>
      <pubDate>Thu, 15 Apr 2021 10:50:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-c-%EC%A4%91%EC%9A%94-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B02/</guid>
      <description>&lt;p&gt;C++ 버전과 역사에 대해서 알아보고, 기본 문법의 This call, New, Name mangling, Conversion 등에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 고급 문법/테크닉 - 개요[1]</title>
      <link>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-%EA%B0%9C%EC%9A%941/</link>
      <pubDate>Thu, 15 Apr 2021 09:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-%EA%B3%A0%EA%B8%89-%EB%AC%B8%EB%B2%95-%ED%85%8C%ED%81%AC%EB%8B%89-%EA%B0%9C%EC%9A%941/</guid>
      <description>&lt;p&gt;C++ 관련 고급 문법과 다양한 고급 테크닉을 공부하겠습니다. C++ 언어의 문법들을 다양한 관점에서 깊이 있게 살펴 보고, C++ 진영에서 사용되는 다양한 코딩 관례, 테크닉을 깊이 있는 관점에서 배우게 됩니다. C++&lt;sup&gt;98&lt;/sup&gt;&amp;frasl;&lt;sub&gt;03&lt;/sub&gt; 문법 뿐 아니라 C++&lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt; 그리고 C++17/20의 내용도 배우게 됩니다.&lt;/p&gt;

&lt;p&gt;C++ 문법 뿐 아니라 C++ IDioms라고 알려져 있는 다양한 테크닉도 배우게 되며, 이 시리즈에서는 C++ 기본 문법을 다루지 않습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Variadic Template[6]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-variadic-template6/</link>
      <pubDate>Wed, 07 Apr 2021 18:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-variadic-template6/</guid>
      <description>&lt;p&gt;이번 포스팅에서는 C++11 에서 추가된 가변인자 템플릿의 기본 문법과 활용에 대해서 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Type Traits[5]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-type-traits5/</link>
      <pubDate>Wed, 07 Apr 2021 16:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-type-traits5/</guid>
      <description>&lt;p&gt;이번 항목에서는 타입의 다양한 속성을 조사하는 traits 개념을 알아 보겠습니다. std 표준의 is_pointer, is_array 등이 내부적으로 traits를 통해 구현 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template Design[7]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-design7/</link>
      <pubDate>Wed, 07 Apr 2021 12:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-design7/</guid>
      <description>&lt;p&gt;이번에는 템플릿 코드의 메모리 사용량을 줄이는 방법, CRTP, SFINAE typelinst 등에 대해서 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template 특수화[4]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-%ED%8A%B9%EC%88%98%ED%99%944/</link>
      <pubDate>Tue, 06 Apr 2021 18:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-%ED%8A%B9%EC%88%98%ED%99%944/</guid>
      <description>&lt;p&gt;이번 포스팅에서는 template specialization, partial specialization, template meta programming에 대해서 알아보겠습니다. 다양한 템플릿 기술의 근본이 되는 아주 중요한 개념입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template 기본 문법[3]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%953/</link>
      <pubDate>Tue, 06 Apr 2021 08:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%953/</guid>
      <description>&lt;p&gt;이번 항목에서는 템플릿의 기본 문법에 대해서 살펴 보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Template Instantiation[2]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-template-instantiation2/</link>
      <pubDate>Mon, 05 Apr 2021 16:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-template-instantiation2/</guid>
      <description>&lt;p&gt;이번 항목에서는 C++ 템플릿의 기본 개념에 대해서 배우게 됩니다. 비교적 쉬운 내용이지만, 뒷 부분의 다양한 고급 기법을 정확히 이해 하려면 반드시 정확하게 이해 해야 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Programming - Intro[1]</title>
      <link>https://ence2.github.io/2021/04/c-template-programming-intro1/</link>
      <pubDate>Mon, 05 Apr 2021 09:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/04/c-template-programming-intro1/</guid>
      <description>&lt;p&gt;C++의 Template 기술은 C++ 에서 가장 신기하고, 재미있고, 깊이있는 분야 입니다. C++로 만들어진 다양한 라이브러리 안에는 Template 을 사용한 고급 코드를 많이 볼수 있습니다. 하지만, Template 은 일반 개발자가 아닌 라이브러리 설계자들이 널리 사용하는 기술이기 때문에, 대부분의 C++ 교육에서는 Template 의 개념 정도만 다루고 있습니다. 그래서, 오픈소스에서 볼수 있는 다양한 고급 기법을 정확히 이해하기는 어려움이 있습니다. 또한, C++의 표준 라이브러리인 STL을 깊이 있게 이해 하기 위해서도 Template 기술은 필수입니다. 이 시리즈는 C++언어의 Template 분야에 대한 다양한 문법과 기법을 배우는 과정입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - STL의 변화[10]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-stl%EC%9D%98-%EB%B3%80%ED%99%9410/</link>
      <pubDate>Wed, 13 Jan 2021 14:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-stl%EC%9D%98-%EB%B3%80%ED%99%9410/</guid>
      <description>&lt;p&gt;C++20에 추가된 STL 표준 관련 추가된 기능을 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Module[9]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-module9/</link>
      <pubDate>Tue, 12 Jan 2021 12:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-module9/</guid>
      <description>&lt;p&gt;현재 글 작성 시점에 C++20 표준의 module을 제대로 지원하는 컴파일러가 존재하지 않아, 간단한 개념과 사용 방법을 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Coroutine[8]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-coroutine8/</link>
      <pubDate>Tue, 12 Jan 2021 11:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-coroutine8/</guid>
      <description>&lt;p&gt;C++20에 추가된 coroutine은 기존 sub-routine과 다르게 caller 함수와 협력 관계로 동작합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - range의 view, ref_view, reverse_view, filter_view[7]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-range%EC%9D%98-view-ref_view-reverse_view-filter_view7/</link>
      <pubDate>Mon, 11 Jan 2021 15:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-range%EC%9D%98-view-ref_view-reverse_view-filter_view7/</guid>
      <description>&lt;p&gt;C++20에서 추가된 Ranges는 C#의 linq와 흡사하게 컨테이너의 데이터를 손쉽게 다룰 수 있는 다양한 알고리즘을 제공합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Requires 절, Concept[6]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-requires-%EC%A0%88-concept6/</link>
      <pubDate>Sun, 10 Jan 2021 10:00:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-requires-%EC%A0%88-concept6/</guid>
      <description>&lt;p&gt;C++20에서 추가된 Requires와 Concept은 타입이 가져야 하는 요구 조건을 정의하는 문법입니다.&lt;/p&gt;

&lt;p&gt;사용자가 만들 수 도 있고, 미리 만들어 져 있는 C++ 표준 Concept로도 제공합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Designated Initialization, Constexpr, Consteval, etc..[5]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-designated-initialization-constexpr-consteval-etc..5/</link>
      <pubDate>Wed, 06 Jan 2021 16:24:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-designated-initialization-constexpr-consteval-etc..5/</guid>
      <description>&lt;p&gt;다음의 C++20에 추가된 기능을 살펴보겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Designated Initialization(지정된 초기화)&lt;/li&gt;
&lt;li&gt;Constexpr&lt;/li&gt;
&lt;li&gt;Consteval&lt;/li&gt;
&lt;li&gt;ETC&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Three Way Comparison(&lt;=&gt;)[4]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-three-way-comparison4/</link>
      <pubDate>Wed, 06 Jan 2021 13:58:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-three-way-comparison4/</guid>
      <description>&lt;p&gt;c++20에는 새로된 연산자 &amp;lt;=&amp;gt; (three-way comparison operator)가 추가되었습니다.&lt;/p&gt;

&lt;p&gt;이 연산자의 의미는 다음과 같습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - Attributes[3]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-attributes3/</link>
      <pubDate>Wed, 06 Jan 2021 11:58:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-attributes3/</guid>
      <description>&lt;p&gt;Attributes는 C++17에서 추가된 문법입니다.&lt;/p&gt;

&lt;p&gt;Attributes는 컴파일러 지시문으로 표준이 나오기 전에는 컴파일러마다 다른 방식으로 사용했습니다.&lt;/p&gt;

&lt;p&gt;C++ 20에서 추가된 Attributes는 다음과 같습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - 람다의 변화[2]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B3%80%ED%99%942/</link>
      <pubDate>Wed, 06 Jan 2021 11:58:00 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B3%80%ED%99%942/</guid>
      <description>&lt;p&gt;C++20 에서 추가된 람다 표현식의 특징은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;템플릿 사용 가능&lt;/li&gt;
&lt;li&gt;평가 되지 않은 표현식 사용 가능&lt;/li&gt;
&lt;li&gt;캡쳐 하지 않은 표현식에서 디폴트 생성자와 대입 연산자 사용 가능&lt;/li&gt;
&lt;li&gt;암시적 this 캡쳐 deprecated&lt;/li&gt;
&lt;li&gt;parameter pack 캡쳐 가능&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;20 리서치 - 소개[1]</title>
      <link>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EC%86%8C%EA%B0%9C1/</link>
      <pubDate>Tue, 05 Jan 2021 15:58:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2021/01/c-20-%EB%A6%AC%EC%84%9C%EC%B9%98-%EC%86%8C%EA%B0%9C1/</guid>
      <description>&lt;p&gt;C++20 관련 시리즈입니다.
C++20 에 추가된 다양한 문법과 라이브러리를 정리합니다.
본 포스팅에서는 간략한 특징을 소개합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>스마트한 shared_ptr 스마트하게 지우는 법</title>
      <link>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</link>
      <pubDate>Sat, 14 Nov 2020 21:31:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%9C-shared_ptr-%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%95%98%EA%B2%8C-%EC%A7%80%EC%9A%B0%EB%8A%94-%EB%B2%95/</guid>
      <description>&lt;p&gt;스마트포인터 shared_ptr의 경우 참조 카운팅이 zero가 되어야 삭제 되는데, 그 시점이 약간 애매 할 수 있어 여러가지 처리를 해 줘야 합니다.&lt;/p&gt;

&lt;p&gt;shared_ptr 생성 시점에서 deleter를 전달 할 수 있고 이를 활용하면 스마트 포인터를 더욱 스마트하게 사용 할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>then과 unwrap을 활용한 future의 다중 연속 구현</title>
      <link>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</link>
      <pubDate>Fri, 13 Nov 2020 21:56:30 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/then%EA%B3%BC-unwrap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-future%EC%9D%98-%EB%8B%A4%EC%A4%91-%EC%97%B0%EC%86%8D-%EA%B5%AC%ED%98%84/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 futue는 강력한 도구입니다.&lt;/p&gt;

&lt;p&gt;이전 포스팅에서 future와 then을 결합하여 연속 연결을 만드는 부분에 대하여 알아봤습니다.&lt;/p&gt;

&lt;p&gt;future를 리턴하는 3개 이상의 비동기 연속 연결을 만드려면 unwrap을 이용해야 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke_result 클래스</title>
      <link>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Tue, 10 Nov 2020 21:44:03 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>&lt;p&gt;컴파일 타임에 지정 된 인수 형식을 사용 하는 호출 가능 형식의 반환 형식을 결정 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boost Future의 continuations(연속 연결)</title>
      <link>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Sun, 08 Nov 2020 23:31:17 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/boost-future%EC%9D%98-continuations%EC%97%B0%EC%86%8D-%EC%97%B0%EA%B2%B0/</guid>
      <description>&lt;p&gt;비동기 프로그래밍에서 하나의 비동기 작업이 완료되면 두 번째 작업을 호출하고 여기에 데이터를 전달하는 것이 매우 일반적입니다. 현재 C ++ 표준은 future에 대한 연속 등록을 허용하지 않습니다. 를 사용하면 결과를 기다리는 대신 결과가 준비되면 호출되는 비동기 작업에 연속 작업이 &amp;ldquo;연결&amp;rdquo;됩니다. then 함수를 사용하여 등록 된 연속 futue는 대기를 차단하거나 폴링 스레드를 낭비하지 않도록하여 애플리케이션의 응답 성과 확장 성을 크게 향상시킵니다&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>