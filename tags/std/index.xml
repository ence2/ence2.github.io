<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>std on Keep calm carry on</title>
    <link>https://ence2.github.io/tags/std/</link>
    <description>Recent content in std on Keep calm carry on</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 29 Nov 2020 22:59:40 +0900</lastBuildDate><atom:link href="https://ence2.github.io/tags/std/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>std::advance 예제</title>
      <link>https://ence2.github.io/2020/11/stdadvance-%EC%98%88%EC%A0%9C/</link>
      <pubDate>Sun, 29 Nov 2020 22:59:40 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdadvance-%EC%98%88%EC%A0%9C/</guid>
      <description>&lt;p&gt;iterator를 원하는 위치로 옮길 수 있는 함수이다. 컨테이너의 iterator를 i번째 위치로 옮기고 싶을 때 사용할 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 변수 타입 최대 최소값 편리하게 확인하는 방법 std::numeric_limits</title>
      <link>https://ence2.github.io/2020/11/c-%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%EC%B5%9C%EB%8C%80-%EC%B5%9C%EC%86%8C%EA%B0%92-%ED%8E%B8%EB%A6%AC%ED%95%98%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-stdnumeric_limits/</link>
      <pubDate>Thu, 26 Nov 2020 12:31:52 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%EC%B5%9C%EB%8C%80-%EC%B5%9C%EC%86%8C%EA%B0%92-%ED%8E%B8%EB%A6%AC%ED%95%98%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-stdnumeric_limits/</guid>
      <description>&lt;p&gt;numeric_limits 클래스 템플릿은 템플릿 특수화로 구현되었고, 명시한 타입의 최대값이나 최소값을 질의 할 수 있는 표준화 된 방법을 제공합니다.&lt;/p&gt;
&lt;p&gt;(예 : int 유형에 대해 가능한 가장 큰 값은 std :: numeric_limits &lt;!-- raw HTML omitted --&gt; :: max ())&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::lock_guard</title>
      <link>https://ence2.github.io/2020/11/stdlock_guard/</link>
      <pubDate>Sat, 14 Nov 2020 22:48:24 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdlock_guard/</guid>
      <description>&lt;h4 id=&#34;stdlock_guard&#34;&gt;std::lock_guard&lt;/h4&gt;
&lt;p&gt;std::lock_guard는 객체 생성 시에 lock되며 객체가 소멸시에 unlock 되는 특성을 가지고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::chrono::high_resolution_clock</title>
      <link>https://ence2.github.io/2020/11/stdchronohigh_resolution_clock/</link>
      <pubDate>Sat, 14 Nov 2020 22:26:09 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdchronohigh_resolution_clock/</guid>
      <description>&lt;p&gt;5 years a go I’ve showed how to &lt;a href=&#34;https://www.guyrutenberg.com/2007/09/22/profiling-code-using-clock_gettime/&#34;&gt;use &lt;code&gt;clock_gettime&lt;/code&gt;&lt;/a&gt; to do basic high_resolution profiling. The approach there is very useful, but unfortunately, not cross-platform. It works only on POSIX compliant systems (especially not windows).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::for_each와 std::transform</title>
      <link>https://ence2.github.io/2020/11/stdfor_each%EC%99%80-stdtransform/</link>
      <pubDate>Tue, 10 Nov 2020 22:02:59 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdfor_each%EC%99%80-stdtransform/</guid>
      <description>&lt;h2 id=&#34;for_each&#34;&gt;for_each&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 에 정의됨&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
Function for_each(InputIterator first, InputIterator last, Function fn);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;범위 내에 원소들에 대해 함수를 실행시킵니다.&lt;/p&gt;
&lt;p&gt;범위 내 (&lt;code&gt;first&lt;/code&gt; 부터 &lt;code&gt;last&lt;/code&gt; 전 까지) 원소들 각각에 대해 함수 &lt;code&gt;fn&lt;/code&gt; 을 실행한다. 참고로 함수의 리턴값은 무시됩니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::invoke_result 클래스</title>
      <link>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Tue, 10 Nov 2020 21:44:03 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdinvoke_result-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>&lt;p&gt;컴파일 타임에 지정 된 인수 형식을 사용 하는 호출 가능 형식의 반환 형식을 결정 합니다. C + + 17에 추가 되었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std upper_bound</title>
      <link>https://ence2.github.io/2020/11/std-upper_bound/</link>
      <pubDate>Sun, 08 Nov 2020 23:22:20 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/std-upper_bound/</guid>
      <description>&lt;h3 id=&#34;upper_bound&#34;&gt;upper_bound&lt;/h3&gt;
&lt;p&gt;컨테이너에서 지정된 키보다 큰 값을 가진 키가 포함된 첫 번째 요소에 대한 it를 반환합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cbegin, begin, rbegin, cend, end, rend 등의 차이점</title>
      <link>https://ence2.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</link>
      <pubDate>Sun, 08 Nov 2020 22:53:27 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</guid>
      <description>&lt;p&gt;C++의 STL 컨테이너들은 Iterator(반복자)를 통해서 내부에 있는 데이터의 한 위치를 가리킬 수가 있습니다.&lt;/p&gt;
&lt;p&gt;Iterator는 for 문을 돌리거나 STL이 제공하는 알고리즘을 실행할 때 사용하게 됩니다.&lt;/p&gt;
&lt;p&gt;begin(), end()는 순방향으로 움직일 때 사용하며, rbegin(), rend()는 역방향으로 움직일 때 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 캐스팅 총정리(스마트포인터 캐스팅 포함)</title>
      <link>https://ence2.github.io/2020/11/c-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%8F%AC%ED%95%A8/</link>
      <pubDate>Sun, 08 Nov 2020 22:31:11 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/c-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC%EC%8A%A4%EB%A7%88%ED%8A%B8%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%8F%AC%ED%95%A8/</guid>
      <description>&lt;p&gt;캐스트는 자료형간 또는 포인터간 형변환시 사용됩니다.&lt;/p&gt;
&lt;p&gt;캐스트는 크게 묵시적 캐스트(implicit cast)와 명시적 캐스트(explicit cast) 두 가지로 나눌 수 있습니다.&lt;/p&gt;
&lt;p&gt;특별히 캐스트 연산자를 사용하지 않고 형변환이 이루어지는 경우를 &amp;ldquo;묵시적 캐스트&amp;rdquo; 라고 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;         &lt;span style=&#34;color:#75715e&#34;&gt;// 묵시적 캐스트
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;) i;  &lt;span style=&#34;color:#75715e&#34;&gt;// 명시적 캐스트 (c-style)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(i) &lt;span style=&#34;color:#75715e&#34;&gt;// C++ style
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>std::tie 사용법</title>
      <link>https://ence2.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 08 Nov 2020 21:38:48 +0900</pubDate>
      
      <guid>https://ence2.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>&lt;h3 id=&#34;stdtie&#34;&gt;std::tie&lt;/h3&gt;
&lt;p&gt;pair, tuple으로 묶인 녀석들을 던저서 여러 변수에 한번에 받아 올 수 있습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
