<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Std on The Game Server Developer</title>
    <link>https://ence88.github.io/tags/std/</link>
    <description>Recent content in Std on The Game Server Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 08 Nov 2020 23:22:20 +0900</lastBuildDate>
    
	<atom:link href="https://ence88.github.io/tags/std/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>std upper_bound</title>
      <link>https://ence88.github.io/2020/11/std-upper_bound/</link>
      <pubDate>Sun, 08 Nov 2020 23:22:20 +0900</pubDate>
      
      <guid>https://ence88.github.io/2020/11/std-upper_bound/</guid>
      <description>&lt;h2 id=&#34;upper-bound&#34;&gt;upper_bound&lt;/h2&gt;

&lt;p&gt;컨테이너에서 지정된 키보다 큰 값을 가진 키가 포함된 첫 번째 요소에 대한 it를 반환합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cbegin, begin, rbegin, cend, end, rend 등의 차이점</title>
      <link>https://ence88.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</link>
      <pubDate>Sun, 08 Nov 2020 22:53:27 +0900</pubDate>
      
      <guid>https://ence88.github.io/2020/11/cbegin-begin-rbegin-cend-end-rend-%EB%93%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/</guid>
      <description>&lt;p&gt;C++의 STL 컨테이너들은 Iterator(반복자)를 통해서 내부에 있는 데이터의 한 위치를 가리킬 수가 있습니다.&lt;/p&gt;

&lt;p&gt;Iterator는 for 문을 돌리거나 STL이 제공하는 알고리즘을 실행할 때 사용하게 됩니다.&lt;/p&gt;

&lt;p&gt;begin(), end()는 순방향으로 움직일 때 사용하며, rbegin(), rend()는 역방향으로 움직일 때 사용합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>shard_ptr의 다운/업 캐스팅</title>
      <link>https://ence88.github.io/2020/11/shard_ptr%EC%9D%98-%EB%8B%A4%EC%9A%B4-%EC%97%85-%EC%BA%90%EC%8A%A4%ED%8C%85/</link>
      <pubDate>Sun, 08 Nov 2020 22:31:11 +0900</pubDate>
      
      <guid>https://ence88.github.io/2020/11/shard_ptr%EC%9D%98-%EB%8B%A4%EC%9A%B4-%EC%97%85-%EC%BA%90%EC%8A%A4%ED%8C%85/</guid>
      <description>&lt;h2 id=&#34;shard-ptr-다운-업-캐스팅&#34;&gt;shard_ptr 다운, 업 캐스팅&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dynamic_pointer_cast&lt;/code&gt;, &lt;code&gt;static_pointer_cast&lt;/code&gt; 및 &lt;code&gt;const_pointer_cast&lt;/code&gt;를 사용하여 &lt;code&gt;shared_ptr&lt;/code&gt;을 캐스팅할 수 있습니다. 이러한 함수는 &lt;strong&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/strong&gt; 및 연산자와 유사 &lt;strong&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/strong&gt; 합니다. 다음 예제에서는 기본 클래스에서 &lt;code&gt;shared_ptr&lt;/code&gt;의 벡터에 있는 각 요소의 파생 형식을 테스트한 다음 요소를 복사하고 이에 대한 정보를 표시하는 방법을 보여 줍니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>std::tie 사용법</title>
      <link>https://ence88.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 08 Nov 2020 21:38:48 +0900</pubDate>
      
      <guid>https://ence88.github.io/2020/11/stdtie-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>&lt;h2 id=&#34;std-tie&#34;&gt;std::tie&lt;/h2&gt;

&lt;p&gt;pair, tuple으로 묶인 녀석들을 던저서 여러 변수에 한번에 받아 올 수 있습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>